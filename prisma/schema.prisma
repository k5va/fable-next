generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Next auth model
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                  String    @id @default(cuid())
    name                String?
    email               String?   @unique
    emailVerified       DateTime?
    image               String?
    accounts            Account[]
    sessions            Session[]
    favoriteProducts    Product[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Fable data model
model Category {
    id              String   @id @default(cuid())
    name            String   @unique
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    products        Product[]
}

model Collection {
    id              String   @id @default(cuid())
    name            String   @unique
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    products        Product[]
}

model Product {
    id              String   @id @default(cuid())
    name            String   @unique
    article         String
    price           Int
    image           ProductImage @relation(fields: [imageId], references: [id])
    imageId         String @unique
    images          ProductGalleryImage[]
    details         String
    collection      Collection @relation(fields: [collectionId], references: [id])
    collectionId    String
    category        Category @relation(fields: [categoryId], references: [id])
    categoryId      String
    productOrders   ProductOrder[]
    favoriteUsers   User[]
    registerDate    DateTime
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

model ProductImage {
    id              String   @id @default(cuid())
    src             String
    product         Product? 
    productId       String
}

model ProductGalleryImage {
    id              String   @id @default(cuid())
    src             String
    product         Product @relation(fields: [productId], references: [id])
    productId       String
}

model Order {
    id              String   @id @default(cuid())
    city            String
    delivery        String
    address         String
    loyaltyCard     String?
    name            String
    phone           String
    email           String
    payment         String
    comment         String?
    productOrders   ProductOrder[]
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

model ProductOrder {
    id              String   @id @default(cuid())
    order           Order @relation(fields: [orderId], references: [id])
    orderId         String
    product         Product @relation(fields: [productId], references: [id])
    productId       String
    size            String
    color           String
    count           Int
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

